{"version":3,"sources":["components/Users.js","components/Products.js","components/Budget.js","components/NavBar.js","components/Layout.js","App.js","serviceWorker.js","index.js"],"names":["baseUrl","initialState","user","nome","cpf","id","list","Users","state","axios","then","resp","setState","data","this","method","url","updateList","add","filter","p","unshift","event","target","name","value","Fragment","Row","className","Col","InputGroup","FormControl","placeholder","aria-label","aria-describedby","onChange","updateField","Button","variant","onClick","save","clear","delete","Table","renderRows","map","key","load","remove","Container","renderForm","renderTable","Component","product","preco","Products","price","Budget","NavigationBar","Navbar","collapseOnSelect","expand","bg","Brand","href","sm","Toggle","aria-controls","Collapse","Nav","Link","Layout","props","children","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.8022219d.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport axios from 'axios';\nimport { Row, Col, InputGroup, FormControl, Table, Button, Container } from 'react-bootstrap';\n\nconst baseUrl = 'https://fontend-test-xgb.herokuapp.com/clientes';\n\nconst initialState = {\n    user: {\n        nome: '',\n        cpf: '',\n        id: ''\n    },\n    list: []\n}\n\nexport class Users extends Component {\n\n    state = { ...initialState }\n\n    componentWillMount() {\n        axios(baseUrl).then(resp => {\n            this.setState({ list: resp.data })\n        })\n    }\n\n    clear() {\n        this.setState({ user: initialState.user });\n    }\n\n    save() {\n        const user = this.state.user\n        const method = user.id ? 'put' : 'post'\n        const url = user.id ? `${baseUrl}/${user.id}` : baseUrl\n        axios[method](url, user)\n            .then(resp => {\n                const list = this.updateList(resp.data)\n                this.setState({ user: initialState.user, list })\n            })\n    }\n\n    updateList(user, add = true) {\n        const list = this.state.list.filter(p => p.id !== user.id)\n        if (add) list.unshift(user)\n        return list\n    }\n\n    updateField(event) {\n        const user = { ...this.state.user }\n        user[event.target.name] = event.target.value\n        this.setState({ user })\n    }\n\n    renderForm() {\n        return (\n            <React.Fragment>\n                <Row className=\"mt-4\">\n                    <Col>\n                        <InputGroup className=\"mt-4 mb-3\">\n                            <FormControl placeholder=\"Nome\" aria-label=\"Nome\" aria-describedby=\"basic-addon2\" name=\"nome\" value={this.state.user.name} onChange={event => this.updateField(event)} />\n                        </InputGroup >\n                    </Col>\n                    <Col>\n                        <InputGroup className=\"mt-4 mb-3\">\n                            <FormControl placeholder=\"CPF\" aria-label=\"Amount\" name=\"cpf\" value={this.state.user.cpf} onChange={event => this.updateField(event)} />\n                        </InputGroup>\n                    </Col>\n                </Row>\n                <Row className=\"mb-5\">\n                    <Col>\n                        <Button variant=\"info\" className=\"mr-2\" onClick={event => this.save(event)}>Salvar</Button>\n                        <Button variant=\"outline-secondary\" onClick={event => this.clear(event)}>Cancelar</Button>\n                    </Col>\n                </Row>\n            </React.Fragment>\n        )\n    }\n\n    load(user) {\n        this.setState({ user })\n    }\n\n    remove(user) {\n        axios.delete(`${baseUrl}/${user.id}`).then(resp => {\n            const list = this.updateList(user, false)\n            this.setState({ list })\n        })\n    }\n\n    renderTable() {\n        return (\n            <Table className=\"mt-4 striped bordered hover\">\n                <thead>\n                    <tr>\n                        <th>ID</th>\n                        <th>Produto</th>\n                        <th>CPF</th>\n                        <th></th>\n                    </tr>\n                </thead>\n                <tbody>{this.renderRows()}</tbody>\n            </Table>\n        )\n    }\n\n    renderRows() {\n        return this.state.list.map(user => {\n            return (\n                <tr key={user.id}>\n                    <td>{user.id}</td>\n                    <td>{user.nome}</td>\n                    <td>{user.cpf}</td>\n                    <td>\n                        <Button variant=\"secondary\" className=\"mr-1\" onClick={() => this.load(user)}>Editar</Button>\n                        <Button variant=\"warning\" onClick={() => this.remove(user)}>Deletar</Button>\n                    </td>\n                </tr>\n            )\n        })\n    }\n\n    render() {\n        return (\n            <Container>\n                {this.renderForm()}\n                {this.renderTable()}\n            </Container>\n        )\n    }\n\n}\n\nexport default Users\n","import React, { Component } from 'react';\nimport axios from 'axios';\nimport { Row, Col, InputGroup, FormControl, Table, Button, Container } from 'react-bootstrap';\n\nconst baseUrl = 'https://fontend-test-xgb.herokuapp.com/produtos';\n\nconst initialState = {\n    product: {\n        nome: '',\n        preco: '',\n        id: ''\n    },\n    list: []\n}\n\nexport class Products extends Component {\n\n    state = { ...initialState }\n\n    componentWillMount() {\n        axios(baseUrl).then(resp => {\n            this.setState({ list: resp.data })\n        })\n    }\n\n    clear() {\n        this.setState({ product: initialState.product });\n    }\n\n    save() {\n        const product = this.state.product\n        const method = product.id ? 'put' : 'post'\n        const url = product.id ? `${baseUrl}/${product.id}` : baseUrl\n        axios[method](url, product)\n            .then(resp => {\n                const list = this.updateList(resp.data)\n                this.setState({ product: initialState.product, list })\n            })\n    }\n\n    updateList(product, add = true) {\n        const list = this.state.list.filter(p => p.id !== product.id)\n        if (add) list.unshift(product)\n        return list\n    }\n\n    updateField(event) {\n        const product = { ...this.state.product }\n        product[event.target.name] = event.target.value\n        this.setState({ product })\n    }\n\n    renderForm() {\n        return (\n            <React.Fragment>\n                <Row className=\"mt-4\">\n                    <Col>\n                        <InputGroup className=\"mt-4 mb-3\">\n                            <FormControl placeholder=\"Nome\" aria-label=\"Nome\" aria-describedby=\"basic-addon2\" name=\"nome\" value={this.state.product.name} onChange={event => this.updateField(event)} />\n                        </InputGroup >\n                    </Col>\n                    <Col>\n                        <InputGroup className=\"mt-4 mb-3\">\n                            <FormControl placeholder=\"Preço\" aria-label=\"Amount\" name=\"preco\" value={this.state.product.price} onChange={event => this.updateField(event)} />\n                        </InputGroup>\n                    </Col>\n                </Row>\n                <Row className=\"mb-5\">\n                    <Col>\n                        <Button variant=\"info\" className=\"mr-2\" onClick={event => this.save(event)}>Salvar</Button>\n                        <Button variant=\"outline-secondary\" onClick={event => this.clear(event)}>Cancelar</Button>\n                    </Col>\n                </Row>\n            </React.Fragment>\n        )\n    }\n\n    load(product) {\n        this.setState({ product })\n    }\n\n    remove(product) {\n        axios.delete(`${baseUrl}/${product.id}`).then(resp => {\n            const list = this.updateList(product, false)\n            this.setState({ list })\n        })\n    }\n\n    renderTable() {\n        return (\n            <Table className=\"mt-4 striped bordered hover\">\n                <thead>\n                    <tr>\n                        <th>ID</th>\n                        <th>Produto</th>\n                        <th>Preço</th>\n                        <th></th>\n                    </tr>\n                </thead>\n                <tbody>{this.renderRows()}</tbody>\n            </Table>\n        )\n    }\n\n    renderRows() {\n        return this.state.list.map(product => {\n            return (\n                <tr key={product.id}>\n                    <td>{product.id}</td>\n                    <td>{product.nome}</td>\n                    <td>{product.preco}</td>\n                    <td>\n                        <Button variant=\"secondary\" className=\"mr-1\" onClick={() => this.load(product)}>Editar</Button>\n                        <Button variant=\"warning\" onClick={() => this.remove(product)}>Deletar</Button>\n                    </td>\n                </tr>\n            )\n        })\n    }\n\n    render() {\n        return (\n            <Container>\n                {this.renderForm()}\n                {this.renderTable()}\n            </Container>\n        )\n    }\n\n}\n\nexport default Products\n","import React from 'react';\n\nexport const Budget = () => (\n    <div id=\"budget\">\n        <h1>Orçamentos</h1>\n    </div>\n)","import React from 'react';\nimport { Nav, Navbar, Link } from 'react-bootstrap';\n\nexport const NavigationBar = () => (\n    <Navbar collapseOnSelect expand=\"lg\" bg=\"light\" variant=\"light\">\n        <Navbar.Brand href=\"#home\" sm={8} >React Crud</Navbar.Brand>\n        <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\n        <Navbar.Collapse id=\"responsive-navbar-nav\" className=\"justify-content-end\">\n            <Nav>\n                <Nav.Link href=\"/\">Usuários</Nav.Link>\n                <Nav.Link href=\"/products\">Produtos</Nav.Link>\n                <Nav.Link href=\"/budget\">Orçamentos</Nav.Link>\n            </Nav>\n        </Navbar.Collapse>\n    </Navbar>\n)\n\nexport default NavigationBar\n","import React from 'react';\nimport Container from 'react-bootstrap/Container';\n\nimport Navbar from './NavBar';\n\nexport const Layout = (props) => (\n    <React.Fragment>\n        <Navbar />\n        <Container>\n            {props.children}\n        </Container>\n    </React.Fragment>\n)\n\nexport default Layout","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nimport { Users } from './components/Users';\nimport { Products } from './components/Products';\nimport { Budget } from './components/Budget';\nimport { Layout } from './components/Layout';\n\n\nfunction App() {\n  return (\n    <React.Fragment>\n      <Layout>\n        <Router>\n          <Switch>\n            <Route exact path=\"/\" component={Users} />\n            <Route path=\"/users\" component={Users} />\n            <Route path=\"/products\" component={Products} />\n            <Route path=\"/budget\" component={Budget} />\n          </Switch>\n        </Router>\n      </Layout>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}